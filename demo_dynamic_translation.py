#!/usr/bin/env python3
"""
Demo-Skript f√ºr dynamische AI-gesteuerte √úbersetzung
"""

import os
import sys

def demo_french_translation():
    """Demo f√ºr franz√∂sische √úbersetzung"""
    print("üá´üá∑ Franz√∂sische √úbersetzung Demo")
    print("=" * 50)
    
    # Simuliere franz√∂sische Locale
    os.environ['LANG'] = 'fr_FR.UTF-8'
    
    # Importiere i18n nach Locale-Setup
    from i18n import i18n, _
    
    print(f"Erkannte Sprache: {i18n.get_language()}")
    print(f"Unterst√ºtzte Sprachen: {i18n.get_supported_languages()}")
    
    # Teste √úbersetzungen
    test_strings = [
        'chat_title',
        'chat_prompt', 
        'ssh_connecting',
        'shortcut_services',
        'chat_goodbye'
    ]
    
    print("\n√úbersetzungen:")
    for string in test_strings:
        translation = _(string)
        print(f"  '{string}' ‚Üí '{translation}'")
    
    print()

def demo_spanish_translation():
    """Demo f√ºr spanische √úbersetzung"""
    print("üá™üá∏ Spanische √úbersetzung Demo")
    print("=" * 50)
    
    # Simuliere spanische Locale
    os.environ['LANG'] = 'es_ES.UTF-8'
    
    # Importiere i18n nach Locale-Setup
    from i18n import i18n, _
    
    print(f"Erkannte Sprache: {i18n.get_language()}")
    print(f"Unterst√ºtzte Sprachen: {i18n.get_supported_languages()}")
    
    # Teste √úbersetzungen
    test_strings = [
        'chat_title',
        'chat_prompt', 
        'ssh_connecting',
        'shortcut_services',
        'chat_goodbye'
    ]
    
    print("\n√úbersetzungen:")
    for string in test_strings:
        translation = _(string)
        print(f"  '{string}' ‚Üí '{translation}'")
    
    print()

def demo_italian_translation():
    """Demo f√ºr italienische √úbersetzung"""
    print("üáÆüáπ Italienische √úbersetzung Demo")
    print("=" * 50)
    
    # Simuliere italienische Locale
    os.environ['LANG'] = 'it_IT.UTF-8'
    
    # Importiere i18n nach Locale-Setup
    from i18n import i18n, _
    
    print(f"Erkannte Sprache: {i18n.get_language()}")
    print(f"Unterst√ºtzte Sprachen: {i18n.get_supported_languages()}")
    
    # Teste √úbersetzungen
    test_strings = [
        'chat_title',
        'chat_prompt', 
        'ssh_connecting',
        'shortcut_services',
        'chat_goodbye'
    ]
    
    print("\n√úbersetzungen:")
    for string in test_strings:
        translation = _(string)
        print(f"  '{string}' ‚Üí '{translation}'")
    
    print()

def demo_japanese_translation():
    """Demo f√ºr japanische √úbersetzung"""
    print("üáØüáµ Japanische √úbersetzung Demo")
    print("=" * 50)
    
    # Simuliere japanische Locale
    os.environ['LANG'] = 'ja_JP.UTF-8'
    
    # Importiere i18n nach Locale-Setup
    from i18n import i18n, _
    
    print(f"Erkannte Sprache: {i18n.get_language()}")
    print(f"Unterst√ºtzte Sprachen: {i18n.get_supported_languages()}")
    
    # Teste √úbersetzungen
    test_strings = [
        'chat_title',
        'chat_prompt', 
        'ssh_connecting',
        'shortcut_services',
        'chat_goodbye'
    ]
    
    print("\n√úbersetzungen:")
    for string in test_strings:
        translation = _(string)
        print(f"  '{string}' ‚Üí '{translation}'")
    
    print()

def demo_runtime_language_switch():
    """Demo f√ºr Runtime-Sprachwechsel"""
    print("üîÑ Runtime-Sprachwechsel Demo")
    print("=" * 50)
    
    from i18n import i18n, _
    
    # Starte mit Deutsch
    i18n.set_language('de')
    print(f"Aktuelle Sprache: {i18n.get_language()}")
    print(f"'chat_title' auf Deutsch: {_('chat_title')}")
    
    # Wechsle zu Franz√∂sisch (dynamisch generiert)
    print("\nWechsle zu Franz√∂sisch...")
    i18n.set_language('fr')
    print(f"Aktuelle Sprache: {i18n.get_language()}")
    print(f"'chat_title' auf Franz√∂sisch: {_('chat_title')}")
    
    # Wechsle zu Spanisch (dynamisch generiert)
    print("\nWechsle zu Spanisch...")
    i18n.set_language('es')
    print(f"Aktuelle Sprache: {i18n.get_language()}")
    print(f"'chat_title' auf Spanisch: {_('chat_title')}")
    
    # Zur√ºck zu Deutsch
    print("\nZur√ºck zu Deutsch...")
    i18n.set_language('de')
    print(f"Aktuelle Sprache: {i18n.get_language()}")
    print(f"'chat_title' auf Deutsch: {_('chat_title')}")
    
    print()

def demo_error_handling():
    """Demo f√ºr Fehlerbehandlung"""
    print("‚ö†Ô∏è  Fehlerbehandlung Demo")
    print("=" * 50)
    
    from i18n import i18n, _
    
    # Teste mit nicht erreichbarem Ollama
    print("Teste mit nicht erreichbarem Ollama...")
    
    # Simuliere Ollama-Ausfall
    import requests
    original_get = requests.get
    
    def mock_failed_get(*args, **kwargs):
        raise Exception("Ollama not available")
    
    requests.get = mock_failed_get
    
    try:
        i18n.set_language('unknown_lang')
        print(f"Fallback-Sprache: {i18n.get_language()}")
        print(f"Fallback-√úbersetzung: {_('chat_title')}")
    finally:
        requests.get = original_get
    
    print()

def main():
    """Hauptfunktion"""
    print("üé≠ Dynamische AI-gesteuerte √úbersetzung Demo")
    print("=" * 60)
    print()
    
    # Pr√ºfe Ollama-Verbindung
    try:
        import requests
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Ollama ist verf√ºgbar - Demo kann durchgef√ºhrt werden")
        else:
            print("‚ö†Ô∏è  Ollama ist nicht erreichbar - Demo verwendet Fallbacks")
    except Exception:
        print("‚ö†Ô∏è  Ollama ist nicht erreichbar - Demo verwendet Fallbacks")
    
    print()
    
    # F√ºhre Demos durch
    demo_french_translation()
    demo_spanish_translation()
    demo_italian_translation()
    demo_japanese_translation()
    demo_runtime_language_switch()
    demo_error_handling()
    
    print("üéâ Demo abgeschlossen!")
    print("\nüí° Tipp: Starte Ollama mit 'ollama serve' f√ºr vollst√§ndige Funktionalit√§t")

if __name__ == "__main__":
    main() 